esphome:
  name: placeholder
  platform: ESP8266
  board: nodemcu

  on_boot:
      then:
          - script.execute: turn_off

api:          
  reboot_timeout: 0s

wifi:
  ssid: "###placeholder###"
  password: "###placeholder###"
  ap:
    ssid: "###placeholder###"
    password: "###placeholder###"
  fast_connect: on

globals:
    - id: lockout_name
      type: "std::string"
      restore_value: no
      initial_value: "\"###placeholder###\""

    - id: allowed_card_ids
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: "{ \"###placeholder###\" }"

    - id: allowed_names
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: "{ \"###placeholder###\" }"

    - id: active_time
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

    - id: last_scanned_id
      type: "std::string"
      restore_value: no
      initial_value: "\"\""
      
    - id: last_scanned_name
      type: "std::string"
      restore_value: no
      initial_value: "\"\""

    - id: expiration_time
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

    - id: heartbeat
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

script:
  - id: turn_on
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning on relay");

          id(expiration_time) = id(active_time);
          id(relay).turn_on();
  - id: turn_off
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning off relay");

          id(relay).turn_off();

interval:
  - interval: 1s
    then:
      - lambda: |-
          if (id(expiration_time) > 0) {
              ESP_LOGD("relay", "decrementing expiration time, current time %i", id(expiration_time));

              id(expiration_time) -= 1;
              if (id(expiration_time) == 0) {
                  id(turn_off).execute();
              }
          }
  - interval: 10s
    then:
      - lambda: |-
          ESP_LOGD("relay", "heartbeat: %i", id(heartbeat));
          id(heartbeat) += 1;

captive_portal:

# Enable logging
logger:

ota:

font:
    - id: hack
      file: "Hack-Regular.ttf"
      size: 15 
    - id: hack10
      file: "Hack-Regular.ttf"
      size: 10 

color:
    - id: yellow
      red: 50%
      green: 50%
      blue: 0%
      white: 0%
    - id: red
      red: 100%
      green: 0%
      blue: 0%
      white: 0%
    - id: green
      red: 0%
      green: 100%
      blue: 0%
      white: 0%

switch:
  - platform: gpio
    pin: D0
    id: relay
    restore_mode: ALWAYS_OFF

i2c:
  sda: D2
  scl: D1

display:
    - platform: ssd1306_i2c
      model: "SSD1306 128x64"
      address: 0x3C
      update_interval: 1s
      lambda: |-
        it.fill(COLOR_OFF);

        it.print(0, 0, id(hack), id(yellow), id(lockout_name).c_str());

        if (id(expiration_time) > 0) {
            it.print(0, 15, id(hack10), id(green), "Unlocked");
            it.print(0, 25, id(hack10), id(green), to_string(id(expiration_time)).c_str());
            it.print(25, 25, id(hack10), id(green), "Seconds Left");
        } else {
            it.print(0, 15, id(hack), id(red), "Locked");
        }

        it.print(0, 45, id(hack10), id(last_scanned_id).c_str());
        it.print(40, 45, id(hack10), id(last_scanned_name).c_str());

wiegand_reader:
  d0_pin: 12 
  d1_pin: 14 
  on_tag:
      lambda: |-
          ESP_LOGD("reader", "Read tag %s", x.c_str());

          id(last_scanned_id) = x;
          id(last_scanned_name) = "Not Allowed";

          bool found = false;
          for (int i = 0; i < id(allowed_card_ids).size(); i++) {
              if (id(allowed_card_ids)[i].compare(x) == 0) {
                  id(last_scanned_name) = id(allowed_names)[i];
                  id(turn_on).execute();
                  found = true;
                  ESP_LOGD(
                      "reader",
                      "allowed tag found matching %s: %s",
                      x.c_str(),
                      id(last_scanned_name).c_str()
                  );
                  break;
              }
          }

          if (!found) {
              ESP_LOGD("reader", "no allowed tags found matching %s", x.c_str());
          }
