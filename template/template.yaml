esphome:
  name: $name
  platform: ESP8266
  board: nodemcu

  on_boot:
      then:
          - script.execute: turn_off

api:          
  reboot_timeout: 0s

wifi:
  ssid: $wifiName
  password: $wifiPass
  manual_ip:
    static_ip: $ip
    gateway: $gateway
    subnet: $subnet
    dns1: $dns
    dns2: 8.8.8.8
  ap:
    ssid: $fallbackWifiName
    password: $fallbackWifiPass
  fast_connect: on
  use_address: $ip

http_request:
  useragent: esphome/device
  timeout: 10s
  esp8266_disable_ssl_support: no

globals:
    - id: lockout_name
      type: "std::string"
      restore_value: no
      initial_value: "\"$name\""

    - id: allowed_card_ids
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedCards

    - id: allowed_names
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedNames

    - id: allowed_ids
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedIds

    - id: active_time
      type: "uint32_t"
      restore_value: no
      initial_value: $activeTime

    - id: last_scanned_card
      type: "std::string"
      restore_value: no
      initial_value: "\"\""

    - id: last_scanned_id
      type: "std::string"
      restore_value: no
      initial_value: "\"\""
      
    - id: last_scanned_name
      type: "std::string"
      restore_value: no
      initial_value: "\"\""

    - id: expiration_time
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

    - id: heartbeat
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

script:
  - id: turn_on
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning on relay");

          id(expiration_time) = id(active_time);
          id(relay).turn_on();
      - http_request.post:
          url: !lambda |-
            auto url = (std::string) "https://archreactor.org/sites/all/modules/civicrm/extern/rest.php?" +
               "api_key=" + "$apiKey" + "&" +
               "key=" + "$key" + "&" +
               "json=1" + "&" +
               "entity=Activity" + "&" +
               "action=Create" + "&" +
               "json=" + "%7B%20%22source_contact_id%22:" + id(last_scanned_id).c_str() + ",%20%22activity_type_id%22%20:%20%22RFID%22%20,%20%22status_id%22:%22Completed%22%20,%20%22subject%22:%22" + id(lockout_name).c_str() + "%22%20,%20%22assignee_id%22:%20" + id(last_scanned_id).c_str() + "%7D" + "&"
               ;
            ESP_LOGD("request", "making post request to %s", url.c_str());
            return url;
          verify_ssl: false
          on_response:
            then:
              - logger.log:
                  format: 'Activity create status: %d, Duration: %u ms'
                  args:
                    - status_code
                    - duration_ms
  - id: turn_off
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning off relay");

          id(relay).turn_off();

interval:
  - interval: 1s
    then:
      - lambda: |-
          if (id(expiration_time) > 0) {
              ESP_LOGD("relay", "decrementing expiration time, current time %i", id(expiration_time));

              id(expiration_time) -= 1;
              if (id(expiration_time) == 0) {
                  id(turn_off).execute();
              }
          }
  - interval: 10s
    then:
      - lambda: |-
          ESP_LOGD("relay", "heartbeat: %i", id(heartbeat));
          id(heartbeat) += 1;

captive_portal:

# Enable logging
logger:

ota:

font:
    - id: hack
      file: "Hack-Regular.ttf"
      size: 15 
    - id: hack10
      file: "Hack-Regular.ttf"
      size: 10 

color:
    - id: yellow
      red: 50%
      green: 50%
      blue: 0%
      white: 0%
    - id: red
      red: 100%
      green: 0%
      blue: 0%
      white: 0%
    - id: green
      red: 0%
      green: 100%
      blue: 0%
      white: 0%

switch:
  - platform: gpio
    pin: $pin
    id: relay
    restore_mode: ALWAYS_OFF

i2c:
  sda: D2
  scl: D1
  frequency: 800kHz

display:
    - platform: ssd1306_i2c
      model: "SSD1306 128x64"
      address: 0x3C
      update_interval: 1s
      lambda: |-
        it.fill(COLOR_OFF);

        if (id(expiration_time) > 0) {
          auto msg = "Unlocked: " + to_string(id(expiration_time));
          it.print(0, 0, id(hack), id(green), msg.c_str());
        } else {
          it.print(0, 0, id(hack), id(red), "Locked");
        }

        it.print(0, 15, id(hack), id(last_scanned_card).c_str());
        it.print(0, 30, id(hack), id(last_scanned_name).c_str());

        it.print(0, 45, id(hack), id(yellow), id(lockout_name).c_str());

wiegand:
  - id: reader
    d0: D6
    d1: D5
    on_raw:
      - lambda: |-
          ESP_LOGD("reader", "received raw %d bits, value %08llx", bits, value);

          auto fixedValue = (value >> 1) & 0x3FFFFFFF;

          ESP_LOGD("reader", "fixed raw %d bits to value %08llx", bits, fixedValue);

          auto lastScannedRaw = format_hex(fixedValue);
          auto firstNonZero = lastScannedRaw.find_first_not_of("0", 0);
          auto lastScanned = lastScannedRaw.substr(firstNonZero);
          id(last_scanned_card) = lastScanned;

          id(last_scanned_name) = "Not Allowed";

          bool found = false;
          for (int i = 0; i < id(allowed_card_ids).size(); i++) {
            auto cardString = id(allowed_card_ids)[i];

            if (cardString.length() <= 5) {
              cardString = "010" + cardString;
            }

            auto parsedCardId = parse_hex<uint32_t>(cardString);

            if (fixedValue == parsedCardId) {
                id(last_scanned_name) = id(allowed_names)[i];
                id(last_scanned_id) = id(allowed_ids)[i];
                id(turn_on).execute();
                found = true;
                ESP_LOGD(
                    "reader",
                    "allowed tag found matching %08llx: %s - %s",
                    fixedValue,
                    id(last_scanned_name).c_str(),
                    id(last_scanned_id).c_str()
                );
                break;
            }
          }

          if (!found) {
              ESP_LOGD("reader", "no allowed tags found matching %08llx", fixedValue);
          }

