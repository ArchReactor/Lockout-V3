esphome:
  name: $name
  platform: ESP8266
  board: nodemcu

  on_boot:
      then:
          - script.execute: turn_off

api:
  #reboot_timeout: 0s
  encryption:
    key: "$espKey"

wifi:
  ssid: $wifiName
  password: $wifiPass
  manual_ip:
    static_ip: $ip
    gateway: $gateway
    subnet: $subnet
    dns1: $dns
    dns2: 8.8.8.8
  ap:
    ssid: $fallbackWifiName
    password: $fallbackWifiPass
  fast_connect: on
  use_address: $ip

http_request:
  useragent: esphome/device
  timeout: 4s
  esp8266_disable_ssl_support: false
  verify_ssl: false

globals:
    - id: lockout_name
      type: "std::string"
      restore_value: no
      initial_value: "\"$name\""

    - id: allowed_card_ids
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedCards

    - id: allowed_names
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedNames

    - id: allowed_ids
      type: "std::vector<std::string>"
      restore_value: no
      initial_value: $allowedIds

    - id: http_queue
      type: 'std::vector<std::string>'

    - id: active_time
      type: "uint32_t"
      restore_value: no
      initial_value: $activeTime

    - id: last_scanned_card
      type: "std::string"
      restore_value: no
      initial_value: ""

    - id: last_scanned_id
      type: "std::string"
      restore_value: no
      initial_value: ""

    - id: last_scanned_name
      type: "std::string"
      restore_value: no
      initial_value: ""

    - id: expiration_time
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

    - id: heartbeat
      type: "uint32_t"
      restore_value: no
      initial_value: "0"

script:
  - id: scan_tag
    parameters:
      tag: string
    then:
      - lambda: |-
          id(last_scanned_id) = tag;
          id(last_scanned_name) = "Not Allowed";

          bool found = false;
          for (int i = 0; i < id(allowed_card_ids).size(); i++) {
            if (id(allowed_card_ids)[i].compare(tag) == 0) {
              id(last_scanned_name) = id(allowed_names)[i];
              id(last_scanned_id) = id(allowed_ids)[i];
              id(last_scanned_card) = id(allowed_card_ids)[i];
              found = true;
              ESP_LOGD(
                "reader",
                "allowed tag found matching %s: %s",
                tag.c_str(),
                id(last_scanned_name).c_str()
              );
              id(turn_on).execute();
              break;
            }
          }

          if (!found) {
            ESP_LOGD("reader", "no allowed tags found matching %s", tag.c_str());
          }

  - id: turn_on
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning on relay");

          id(expiration_time) = id(active_time);
          id(relay).turn_on();
          auto url = (std::string) "http://esphome.arsec.lan/rfid.php?id=" + id(last_scanned_id).c_str() + "&name=" + id(lockout_name).c_str();
          id(http_queue).push_back(url);

  - id: turn_off
    then:
      - lambda: |-
          ESP_LOGD("relay", "turning off relay");

          id(relay).turn_off();

interval:
  - interval: 1s
    then:
      - while:
          condition:
            lambda: 'return !id(http_queue).empty();'
          then:
            - http_request.get:
                url: !lambda |-
                  auto url = id(http_queue).front();
                  id(http_queue).erase(id(http_queue).begin());
                  ESP_LOGD("request", "making request to %s", url.c_str());
                  return url;
                on_response:
                  then:
                    - lambda: |-
                        ESP_LOGD("request", "Request Complete %d %u ms", response->status_code, response->duration_ms);
      - lambda: |-
          if (id(expiration_time) > 0 && id(expiration_time) < 999) {
              ESP_LOGD("relay", "decrementing expiration time, current time %i", id(expiration_time));

              id(expiration_time) -= 1;
              if (id(expiration_time) == 0) {
                  id(turn_off).execute();
              }
          }
  - interval: 10s
    then:
      - lambda: |-
          ESP_LOGD("relay", "heartbeat: %i", id(heartbeat));
          id(heartbeat) += 1;

captive_portal:

# Enable logging
logger:

ota:
  platform: esphome

font:
    - id: hack
      file: "Hack-Regular.ttf"
      size: 15
    - id: hack10
      file: "Hack-Regular.ttf"
      size: 10

color:
    - id: yellow
      red: 50%
      green: 50%
      blue: 0%
      white: 0%
    - id: red
      red: 100%
      green: 0%
      blue: 0%
      white: 0%
    - id: green
      red: 0%
      green: 100%
      blue: 0%
      white: 0%

switch:
  - platform: gpio
    pin: $pin
    id: relay
    restore_mode: ALWAYS_OFF

text:
  - platform: template
    mode: text
    id: scanid
    name: "Scan ID"
    initial_value: ""
    set_action:
      then:
        - lambda: |-
            if (x != "") {
              id(scan_tag)->execute(x);
            }

text_sensor:
  - platform: template
    name: "Last Person"
    lambda: |-
      return id(last_scanned_name);

i2c:
  sda: D2
  scl: D1
  frequency: 800kHz

display:
    - platform: ssd1306_i2c
      model: "SSD1306 128x64"
      address: 0x3C
      update_interval: 1s
      lambda: |-
        it.fill(COLOR_OFF);

        if(id(expiration_time) == 999) {
          it.print(0, 0, id(hack), id(green), "Unlocked until reset");
        } else if (id(expiration_time) > 0) {
          auto msg = "Unlocked: " + to_string(id(expiration_time));
          it.print(0, 0, id(hack), id(green), msg.c_str());
        } else {
          it.print(0, 0, id(hack), id(red), "Locked");
        }

        it.print(0, 15, id(hack), id(last_scanned_card).c_str());
        it.print(0, 30, id(hack), id(last_scanned_name).c_str());

        it.print(0, 45, id(hack), id(yellow), id(lockout_name).c_str());

external_components:
  - source:
      type: local
      path: components

wiegand_reader:
  - id: reader
    d0: D6
    d1: D5
    on_tag:
      - lambda: |-
          if (x != "") {
              id(scan_tag)->execute(x);
          }
